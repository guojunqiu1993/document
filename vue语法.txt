1.条件渲染:
	1.v-if 
	<div v-if="Math.random() > 0.5">
  		Now you see me
	</div>
	<div v-else>
 		 Now you don't
	</div>  
	(注意：v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别)
	

	2.v-if v-else-if （2.1.0新增）
	<div v-if="type === 'A'">
  		A
	</div>
	<div v-else-if="type === 'B'">
 	 	B
	</div>
	<div v-else-if="type === 'C'">
 		 C
	</div>
	<div v-else>
 	 Not A/B/C
	</div>
	(注意：类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后)


	3.v-show 根据值来简单显示和隐藏元素 
	<h1 v-show="ok">Hello!</h1>

2.列表循环
	<ul id="example-2">
  		<li v-for="(item, index) in items">
    			{{ index }} - {{ item.message }}
  		</li>
	</ul>

	<ul>
  		<li v-for="value in object">
    			{{ value }}
  		</li>
	</ul>
	

	<div v-for="item in items" :key="item.id">
 	 <!-- 内容 -->
	</div>
	（注意：2.2.0 key是必须要有的，识别节点的一个机制）
	
	过滤
	<li v-for="n in evenNumbers">{{ n }}</li>
	data: {
  		numbers: [ 1, 2, 3, 4, 5 ]
	},
	computed: {
  		evenNumbers: function () {
   			 return this.numbers.filter(function (number) {
      				return number % 2 === 0
    		})
  		}
	}

3.事件处理
	<div id="example-3">
 	   <button v-on:click="say('hi')">Say hi</button>
 	   <button v-on:click="say('what')">Say what</button>
	</div>
	new Vue({
           el: '#example-3',
           methods: {
              say: function (message) {
                  alert(message)
              }
           }
        })
	（注意：v-on监听dom事件，触发js，还要些事件修饰符：按键修饰符、事件处理修饰符冒泡和阻止事件传递、系统修饰符、鼠标修饰符）

	
	v-on缩写
	完整: <a v-on:click="dosomenthing"></a>   缩写：<a @click="dosomething"></a>
	
	v-bind缩写
	完整 <a v-bind:href="url"></a>   缩写：<a :href="url"></a>	