性能优化:
一.减少HTTP的请求数：一个完整的请求需要经过DNS寻找地址、与服务器建立连接、发送数据、等待服务器响应、接收数据的复杂过程，同时占用带宽，会增加用户的等待时间，给用户造成站点速度慢的印象
减少HTTP请求数的途径：1.设计上简化页面 2.合理使用HTTP缓冲（对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。
对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓冲）3.资源合并与压缩（CSS、Javascript、Image都可以用相应的工具进行压缩）4.css sprites 雪碧图 合并css图片
5.懒加载 （只加载当前的页面资源，场景：页面滚动翻页）
二.将js放在最后执行  （例如在脚本加载完成之前，它后面的图片、样式以及其他脚本都处于阻塞状态，直到脚本加载完成后才会开始加载。如果将脚本放在比较靠前的位置，则会影响整个页面的加载速度从而影响用户体验）
三.将CSS放在HEAD中(将CSS放在其他地方比如BODY中，则浏览器有可能还未下载和解析到CSS就已经开始渲染页面了，这就导致页面由无CSS状态跳转到CSS状态，用户体验比较糟糕)
四.异步请求callback
五.减少不必要的http跳转
六.避免重复的资源请求

代码优化：
一.

